[{"path":[]},{"path":"https://vetiver.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://vetiver.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://vetiver.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://vetiver.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://vetiver.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@rstudio.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://vetiver.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://vetiver.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://vetiver.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://vetiver.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://vetiver.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://vetiver.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://vetiver.tidymodels.org/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to vetiver","title":"Contributing to vetiver","text":"outlines propose change vetiver. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://vetiver.tidymodels.org/dev/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to vetiver","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://vetiver.tidymodels.org/dev/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to vetiver","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://vetiver.tidymodels.org/dev/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to vetiver","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"tidymodels/vetiver-r\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://vetiver.tidymodels.org/dev/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to vetiver","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://vetiver.tidymodels.org/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to vetiver","text":"Please note modelops project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://vetiver.tidymodels.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 RStudio Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://vetiver.tidymodels.org/dev/articles/model-card.html","id":"what-is-a-model-card","dir":"Articles","previous_headings":"","what":"What is a “Model Card”?","title":"Model cards for transparent, responsible reporting","text":"Good documentation helps us make sense software, know use , understand purpose. can true documentation reporting deployed model, can hard know start. paper “Model Cards Model Reporting” (Mitchell et al. 2019) provides suggested framework organizing presenting essential facts deployed machine learning model. vetiver package provides R Markdown template creating “Model Card” published vetiver model. template automates extracting information model object, provides structure model developer automation possible. Model developers see nudge create model card publish model; recommend create model card deploy model first time refresh model card needed new versions deployed. (Learn silencing messages like desired.)","code":"library(vetiver) library(pins) model_board <- board_temp()  cars_lm <- lm(mpg ~ ., data = mtcars) v <- vetiver_model(cars_lm, \"cars_linear\") vetiver_pin_write(model_board, v) #> Creating new version '20220407T171911Z-ef031' #> Writing to pin 'cars_linear' #>  #> Create a Model Card for your published model #> • Model Cards provide a framework for transparent, responsible reporting #> • Use the vetiver `.Rmd` template as a place to start"},{"path":"https://vetiver.tidymodels.org/dev/articles/model-card.html","id":"accessing-the-template","dir":"Articles","previous_headings":"","what":"Accessing the template","title":"Model cards for transparent, responsible reporting","text":"use vetiver model card template RStudio, access File -> New File -> R Markdown. open dialog box can select one available templates: Create new Model Card using RStudio, ’ll also need install Pandoc. , use rmarkdown::draft() function create model card:","code":"rmarkdown::draft(     \"my_model_card.Rmd\",      template = \"vetiver_model_card\",      package = \"vetiver\" )"},{"path":"https://vetiver.tidymodels.org/dev/articles/model-card.html","id":"model-card-outline","dir":"Articles","previous_headings":"","what":"Model card outline","title":"Model cards for transparent, responsible reporting","text":"several sections model card framework used . Model details: details model can determined model object , (like developed model license citation information) need provided . Intended use: Outline intended use users model, perhaps also types use scope. Important aspects/factors: demographic, environmental, technical, aspects relevant context model? Performance metrics: Communicate metrics used evaluate model, good fit model’s context domain. Training data & evaluation data: specific dataset used train model, sure share basic details characteristics. (information training data can extracted model object .) (probably different) specific dataset used evaluate model context model card, also explain evaluation data like. Quantitative analyses: Provide results evaluating model using chosen metrics evaluation data. sure present overall results (dataset whole) disaggregated results, especially aspects (demographic, environmental, ) mind identified important model. can use tables visualization present quantitative analyses. Ethical considerations: Share ethical considerations possible solutions considered. specific aspects note sensitive data used, impact human life, possible risks harms, important use cases. Caveats & recommendations: model developer, likely domain knowledge model can . section good place share additional thoughts, perhaps including identity may may come play model’s context.","code":""},{"path":"https://vetiver.tidymodels.org/dev/articles/model-card.html","id":"cant-i-just-delete-the-section-on-ethical-considerations","dir":"Articles","previous_headings":"","what":"Can’t I just delete the section on ethical considerations?","title":"Model cards for transparent, responsible reporting","text":"’s possible given machine learning model may obvious caveats, ethical challenges, demographic aspects, largely unknown. However, strongly advise instead deleting section incomplete imprecise information, note process considerations. Also, consider possibility gathering feedback impacted machine learning system, especially marginalized identities. process documenting extent limits machine learning system part transparent, responsible reporting. model card framework helpful tool parts model card can automated, ultimately extent value depends . Mitchell et al. (2019): Therefore usefulness accuracy model card relies integrity creator(s) card .","code":""},{"path":"https://vetiver.tidymodels.org/dev/articles/vetiver.html","id":"create-a-vetiver_model","dir":"Articles","previous_headings":"","what":"Create a vetiver_model()","title":"Version, share, and deploy a model with vetiver","text":"vetiver package extensible, generics can support many kinds models. example, let’s consider one kind model supported vetiver, tidymodels workflow encompasses feature engineering model estimation. svm_fit object fitted workflow, feature engineering model parameters estimated using training data bivariate_train. can create vetiver_model() trained model; vetiver_model() collects information needed store, version, deploy trained model. Think vetiver_model() deployable model object.","code":"library(parsnip) library(recipes) #> Loading required package: dplyr #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union #>  #> Attaching package: 'recipes' #> The following object is masked from 'package:stats': #>  #>     step library(workflows) data(bivariate, package = \"modeldata\") bivariate_train #> # A tibble: 1,009 × 3 #>        A     B Class #>    <dbl> <dbl> <fct> #>  1 3279. 155.  One   #>  2 1727.  84.6 Two   #>  3 1195. 101.  One   #>  4 1027.  68.7 Two   #>  5 1036.  73.4 One   #>  6 1434.  79.5 One   #>  7  633.  67.4 One   #>  8 1262.  67.0 Two   #>  9  985.  62.0 Two   #> 10  893.  56.8 Two   #> # … with 999 more rows  biv_rec <-   recipe(Class ~ ., data = bivariate_train) %>%   step_BoxCox(all_predictors())%>%   step_normalize(all_predictors())  svm_spec <-   svm_linear(mode = \"classification\") %>%   set_engine(\"LiblineaR\")  svm_fit <-    workflow(biv_rec, svm_spec) %>%   fit(sample_frac(bivariate_train, 0.7)) library(vetiver) v <- vetiver_model(svm_fit, \"biv_svm\") v #>  #> ── biv_svm ─ <butchered_workflow> model for deployment  #> A LiblineaR classification modeling workflow using 2 features"},{"path":"https://vetiver.tidymodels.org/dev/articles/vetiver.html","id":"store-and-version-your-model","dir":"Articles","previous_headings":"","what":"Store and version your model","title":"Version, share, and deploy a model with vetiver","text":"can store version model choosing pins “board” , including local folder, RStudio Connect, Amazon S3, . pins boards versioning turned default, can turn explicitly temporary demo board. write vetiver_model() board, binary model object stored board together necessary metadata, like packages needed make prediction model’s input data prototype checking new data prediction time. Let’s train model new version dataset write board. versions stored, access . primary purpose pins make easy share data artifacts, depending board choose, pinned vetiver_model() can shareable collaborators.","code":"library(pins) model_board <- board_temp(versioned = TRUE) model_board %>% vetiver_pin_write(v) svm_fit <-    workflow(biv_rec, svm_spec) %>%   fit(sample_frac(bivariate_train, 0.7))  v <- vetiver_model(svm_fit, \"biv_svm\")  model_board %>% vetiver_pin_write(v) model_board %>% pin_versions(\"biv_svm\") #> # A tibble: 2 × 3 #>   version                created             hash  #>   <chr>                  <dttm>              <chr> #> 1 20220407T171915Z-edaa5 2022-04-07 17:19:00 edaa5 #> 2 20220407T171915Z-f7331 2022-04-07 17:19:00 f7331"},{"path":"https://vetiver.tidymodels.org/dev/articles/vetiver.html","id":"deploy-your-model","dir":"Articles","previous_headings":"","what":"Deploy your model","title":"Version, share, and deploy a model with vetiver","text":"can deploy model creating Plumber router, adding POST endpoint making predictions. start server using object, pipe (%>%) pr_run(port = 8088) port choice. allows interact vetiver API locally debug . Plumber APIs can hosted variety ways. can use function vetiver_write_plumber() create ready--go plumber.R file especially suited RStudio Connect. real-world situation, see something like b <- board_rsconnect() b <- board_s3() instead temporary demo board. Notice deployment strongly linked specific version pinned model; pin another version model deploy model, deployed model affected.","code":"library(plumber) pr() %>%   vetiver_api(v) #> # Plumber router with 2 endpoints, 4 filters, and 0 sub-routers. #> # Use `pr_run()` on this object to start the API. #> ├──[queryString] #> ├──[body] #> ├──[cookieParser] #> ├──[sharedSecret] #> ├──/ping (GET) #> └──/predict (POST) #> vetiver_write_plumber(model_board, \"biv_svm\") # Generated by the vetiver package; edit with care  library(pins) library(plumber) library(rapidoc) library(vetiver)  # Packages needed to generate model predictions if (FALSE) {     library(LiblineaR)     library(parsnip)     library(recipes)     library(workflows) } b <- board_folder(path = \"/tmp/RtmpxzxjoJ/pins-3c9360899f0d\") v <- vetiver_pin_read(b, \"biv_svm\", version = \"20220407T171915Z-edaa5\")  #* @plumber function(pr) {     pr %>% vetiver_api(v) }"},{"path":"https://vetiver.tidymodels.org/dev/articles/vetiver.html","id":"predict-from-your-model-endpoint","dir":"Articles","previous_headings":"","what":"Predict from your model endpoint","title":"Version, share, and deploy a model with vetiver","text":"model deployed via vetiver can treated special vetiver_endpoint() object. deployed model endpoint running via one R process (either remotely server locally, perhaps via background job RStudio IDE), can make predictions deployed model new data another, separate R process. able predict() vetiver model endpoint takes advantage model’s input data prototype metadata stored model.","code":"library(vetiver) endpoint <- vetiver_endpoint(\"http://127.0.0.1:8088/predict\") endpoint #>  #> ── A model API endpoint for prediction:  #> http://127.0.0.1:8088/predict data(bivariate, package = \"modeldata\") predict(endpoint, bivariate_test) #> # A tibble: 710 × 1 #>    .pred_class #>    <chr>       #>  1 One         #>  2 Two         #>  3 One         #>  4 Two         #>  5 Two         #>  6 One         #>  7 Two         #>  8 Two         #>  9 Two         #> 10 One         #> # … with 700 more rows"},{"path":"https://vetiver.tidymodels.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Julia Silge. Maintainer, author. . Copyright holder, funder.","code":""},{"path":"https://vetiver.tidymodels.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Silge J (2022). vetiver: Version, Share, Deploy, Monitor Models. https://vetiver.tidymodels.org/, https://github.com/tidymodels/vetiver-r.","code":"@Manual{,   title = {vetiver: Version, Share, Deploy, and Monitor Models},   author = {Julia Silge},   year = {2022},   note = {https://vetiver.tidymodels.org/, https://github.com/tidymodels/vetiver-r}, }"},{"path":"https://vetiver.tidymodels.org/dev/index.html","id":"vetiver-","dir":"","previous_headings":"","what":"Version, Share, Deploy, and Monitor Models","title":"Version, Share, Deploy, and Monitor Models","text":"Vetiver, oil tranquility, used stabilizing ingredient perfumery preserve volatile fragrances. goal vetiver provide fluent tooling version, share, deploy, monitor trained model. Functions handle recording checking model’s input data prototype, predicting remote API endpoint. vetiver package extensible, generics can support many kinds models. can use vetiver : tidymodels workflow caret mlr3 XGBoost ranger lm() glm()","code":""},{"path":"https://vetiver.tidymodels.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Version, Share, Deploy, and Monitor Models","text":"can install released version vetiver CRAN : development version GitHub :","code":"install.packages(\"vetiver\") # install.packages(\"devtools\") devtools::install_github(\"tidymodels/vetiver-r\")"},{"path":"https://vetiver.tidymodels.org/dev/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Version, Share, Deploy, and Monitor Models","text":"vetiver_model() object collects information needed store, version, deploy trained model. can version share vetiver_model() choosing pins “board” , including local folder, RStudio Connect, Amazon S3, . can deploy pinned vetiver_model() via Plumber API, can hosted variety ways. deployed model endpoint running via one R process (either remotely server locally, perhaps via background job RStudio IDE), can make predictions deployed model new data another, separate R process. First, create model endpoint: model API endpoint deployed vetiver return predictions appropriate new data.","code":"library(parsnip) library(workflows) data(Sacramento, package = \"modeldata\")  rf_spec <- rand_forest(mode = \"regression\") rf_form <- price ~ type + sqft + beds + baths  rf_fit <-      workflow(rf_form, rf_spec) %>%     fit(Sacramento)  library(vetiver) v <- vetiver_model(rf_fit, \"sacramento_rf\") v #>  #> ── sacramento_rf ─ <butchered_workflow> model for deployment  #> A ranger regression modeling workflow using 4 features library(pins) model_board <- board_temp() model_board %>% vetiver_pin_write(v) library(plumber) pr() %>%   vetiver_api(v) %>%   pr_run(port = 8088) library(vetiver) endpoint <- vetiver_endpoint(\"http://127.0.0.1:8088/predict\") endpoint #>  #> ── A model API endpoint for prediction:  #> http://127.0.0.1:8088/predict library(tidyverse) new_sac <- Sacramento %>%      slice_sample(n = 20) %>%      select(type, sqft, beds, baths)  predict(endpoint, new_sac) #> # A tibble: 20 x 1 #>      .pred #>      <dbl> #>  1 165042. #>  2 212461. #>  3 119008. #>  4 201752. #>  5 223096. #>  6 115696. #>  7 191262. #>  8 211706. #>  9 259336. #> 10 206826. #> 11 234952. #> 12 221993. #> 13 204983. #> 14 548052. #> 15 151186. #> 16 299365. #> 17 213439. #> 18 287993. #> 19 272017. #> 20 226629."},{"path":"https://vetiver.tidymodels.org/dev/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Version, Share, Deploy, and Monitor Models","text":"project released Contributor Code Conduct. contributing project, agree abide terms. questions discussions modeling packages, modeling, machine learning, please post RStudio Community. think encountered bug, please submit issue. Either way, learn create share reprex (minimal, reproducible example), clearly communicate code.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/api_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the OpenAPI specification using model metadata — api_spec","title":"Update the OpenAPI specification using model metadata — api_spec","text":"Update OpenAPI specification using model metadata","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/api_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the OpenAPI specification using model metadata — api_spec","text":"","code":"api_spec(spec, vetiver_model, path, all_docs = TRUE)  glue_spec_summary(ptype, return_type)  # S3 method for default glue_spec_summary(ptype, return_type = NULL)  # S3 method for data.frame glue_spec_summary(ptype, return_type = \"predictions\")  # S3 method for array glue_spec_summary(ptype, return_type = \"predictions\")"},{"path":"https://vetiver.tidymodels.org/dev/reference/api_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the OpenAPI specification using model metadata — api_spec","text":"spec OpenAPI Specification formatted list object vetiver_model deployable vetiver_model() object path endpoint path all_docs interactive visual API documentation created POST endpoints router pr? defaults TRUE, assumes POST endpoints use vetiver_model$ptype input data prototype. ptype input data prototype model return_type Character string describe endpoint returns, \"predictions\"","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/api_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update the OpenAPI specification using model metadata — api_spec","text":"api_spec() returns updated OpenAPI Specification object. function uses glue_spec_summary() internally, returns gluecharacter string.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/api_spec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update the OpenAPI specification using model metadata — api_spec","text":"","code":"library(plumber) cars_lm <- lm(mpg ~ ., data = mtcars) v <- vetiver_model(cars_lm, \"cars_linear\")  glue_spec_summary(v$ptype) #> Return predictions from model using 10 features  modify_spec <- function(spec) api_spec(spec, v, \"/predict\") pr() %>% pr_set_api_spec(api = modify_spec) #> # Plumber router with 0 endpoints, 4 filters, and 0 sub-routers. #> # Use `pr_run()` on this object to start the API. #> ├──[queryString] #> ├──[body] #> ├──[cookieParser] #> ├──[sharedSecret]"},{"path":"https://vetiver.tidymodels.org/dev/reference/attach_pkgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Fully attach or load packages for making model predictions — attach_pkgs","title":"Fully attach or load packages for making model predictions — attach_pkgs","text":"developer-facing functions, useful supporting new model types. models require one R packages fully attached make predictions, require namespace one R packages loaded.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/attach_pkgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fully attach or load packages for making model predictions — attach_pkgs","text":"","code":"attach_pkgs(pkgs)  load_pkgs(pkgs)"},{"path":"https://vetiver.tidymodels.org/dev/reference/attach_pkgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fully attach or load packages for making model predictions — attach_pkgs","text":"pkgs character vector package names load fully attach.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/attach_pkgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fully attach or load packages for making model predictions — attach_pkgs","text":"invisible TRUE.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/attach_pkgs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fully attach or load packages for making model predictions — attach_pkgs","text":"two functions attempt either : fully attach load namespace pkgs vector package names, preserving current random seed. learn load vs. attach, read NAMESPACE chapter R Packages. deploying model, likely safer fully attach needed packages comes risk naming conflicts packages.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/attach_pkgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fully attach or load packages for making model predictions — attach_pkgs","text":"","code":"## succeed load_pkgs(c(\"knitr\", \"readr\")) attach_pkgs(c(\"knitr\", \"readr\"))  ## fail try(load_pkgs(c(\"bloopy\", \"readr\"))) #> Error in namespace_handling(pkgs, loadNamespace, \"Namespace(s) could not be loaded:\") :  #>   Namespace(s) could not be loaded: #> • bloopy try(attach_pkgs(c(\"bloopy\", \"readr\"))) #> Error in namespace_handling(pkgs, attachNamespace, \"Package(s) could not be attached:\") :  #>   Package(s) could not be attached: #> • bloopy"},{"path":"https://vetiver.tidymodels.org/dev/reference/handler_startup.html","id":null,"dir":"Reference","previous_headings":"","what":"Model handler functions for API endpoint — handler_startup.train","title":"Model handler functions for API endpoint — handler_startup.train","text":"developer-facing functions, useful supporting new model types. model supported vetiver_model() uses two handler functions vetiver_api(): handler_startup function executes API starts. Use function tasks like loading packages. model can use default method , NULL (nothing startup). handler_predict function executes API call. Use function calling predict() tasks must executed API call.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/handler_startup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model handler functions for API endpoint — handler_startup.train","text":"","code":"# S3 method for train handler_startup(vetiver_model)  # S3 method for train handler_predict(vetiver_model, ...)  # S3 method for glm handler_predict(vetiver_model, ...)  handler_startup(vetiver_model)  # S3 method for default handler_startup(vetiver_model)  handler_predict(vetiver_model, ...)  # S3 method for default handler_predict(vetiver_model, ...)  # S3 method for lm handler_predict(vetiver_model, ...)  # S3 method for Learner handler_startup(vetiver_model)  # S3 method for Learner handler_predict(vetiver_model, ...)  # S3 method for ranger handler_startup(vetiver_model)  # S3 method for ranger handler_predict(vetiver_model, ...)  # S3 method for workflow handler_startup(vetiver_model)  # S3 method for workflow handler_predict(vetiver_model, ...)  # S3 method for xgb.Booster handler_startup(vetiver_model)  # S3 method for xgb.Booster handler_predict(vetiver_model, ...)"},{"path":"https://vetiver.tidymodels.org/dev/reference/handler_startup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model handler functions for API endpoint — handler_startup.train","text":"vetiver_model deployable vetiver_model() object ... arguments passed predict(), prediction type","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/handler_startup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model handler functions for API endpoint — handler_startup.train","text":"handler_startup function return invisibly, handler_predict function return function signature function(req). request body (req$body) consists new data prediction time; function return predictions either tibble list coercable tibble via tibble::as_tibble().","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/handler_startup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model handler functions for API endpoint — handler_startup.train","text":"two generics use class vetiver_model$model dispatch.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/handler_startup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model handler functions for API endpoint — handler_startup.train","text":"","code":"cars_lm <- lm(mpg ~ ., data = mtcars) v <- vetiver_model(cars_lm, \"cars_linear\") handler_startup(v) handler_predict(v) #> function (req)  #> { #>     newdata <- req$body #>     if (!is_null(ptype)) { #>         newdata <- vetiver_type_convert(newdata, ptype) #>         newdata <- hardhat::scream(newdata, ptype) #>     } #>     ret <- predict(vetiver_model$model, newdata = newdata, ...) #>     list(.pred = ret) #> } #> <bytecode: 0x55e60e3a7c80> #> <environment: 0x55e60e3aaa10>"},{"path":"https://vetiver.tidymodels.org/dev/reference/map_request_body.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify data types for each column in an input data prototype — map_request_body","title":"Identify data types for each column in an input data prototype — map_request_body","text":"OpenAPI specification Plumber API created via plumber::pr() can modified via plumber::pr_set_api_spec(), helper function identify data types predictors create list use specification. R data types, instead basic JSON data types. example, factors R documented strings OpenAPI specification.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/map_request_body.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify data types for each column in an input data prototype — map_request_body","text":"","code":"map_request_body(ptype)"},{"path":"https://vetiver.tidymodels.org/dev/reference/map_request_body.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify data types for each column in an input data prototype — map_request_body","text":"ptype input data prototype model","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/map_request_body.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify data types for each column in an input data prototype — map_request_body","text":"list used within plumber::pr_set_api_spec()","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/map_request_body.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify data types for each column in an input data prototype — map_request_body","text":"developer-facing function, useful supporting new model types. called api_spec().","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/map_request_body.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify data types for each column in an input data prototype — map_request_body","text":"","code":"map_request_body(vctrs::vec_slice(chickwts, 0)) #> $content #> $content$`application/json` #> $content$`application/json`$schema #> $content$`application/json`$schema$type #> [1] \"array\" #>  #> $content$`application/json`$schema$minItems #> [1] 1 #>  #> $content$`application/json`$schema$items #> $content$`application/json`$schema$items$type #> [1] \"object\" #>  #> $content$`application/json`$schema$items$properties #> $content$`application/json`$schema$items$properties$weight #> $content$`application/json`$schema$items$properties$weight$type #> [1] \"number\" #>  #>  #> $content$`application/json`$schema$items$properties$feed #> $content$`application/json`$schema$items$properties$feed$type #> [1] \"string\" #>  #>  #>  #>  #>  #>  #>"},{"path":"https://vetiver.tidymodels.org/dev/reference/predict.vetiver_endpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Post new data to a deployed model API endpoint and return predictions — predict.vetiver_endpoint","title":"Post new data to a deployed model API endpoint and return predictions — predict.vetiver_endpoint","text":"Post new data deployed model API endpoint return predictions","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/predict.vetiver_endpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post new data to a deployed model API endpoint and return predictions — predict.vetiver_endpoint","text":"","code":"# S3 method for vetiver_endpoint predict(object, new_data, ...)"},{"path":"https://vetiver.tidymodels.org/dev/reference/predict.vetiver_endpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post new data to a deployed model API endpoint and return predictions — predict.vetiver_endpoint","text":"object model API endpoint object created vetiver_endpoint(). new_data New data making predictions, data frame. ... Extra arguments passed httr::POST()","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/predict.vetiver_endpoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post new data to a deployed model API endpoint and return predictions — predict.vetiver_endpoint","text":"tibble model predictions many rows new_data.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/predict.vetiver_endpoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post new data to a deployed model API endpoint and return predictions — predict.vetiver_endpoint","text":"","code":"if (FALSE) { endpoint <- vetiver_endpoint(\"http://127.0.0.1:8088/predict\") predict(endpoint, mtcars[4:7, -1]) }"},{"path":"https://vetiver.tidymodels.org/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics augment","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver-package.html","id":null,"dir":"Reference","previous_headings":"","what":"vetiver: Version, Share, Deploy, and Monitor Models — vetiver-package","title":"vetiver: Version, Share, Deploy, and Monitor Models — vetiver-package","text":"goal 'vetiver' provide fluent tooling version, share, deploy, monitor trained model. Functions handle recording checking model's input data prototype, predicting remote API endpoint. 'vetiver' package extensible, generics can support many kinds models.","code":""},{"path":[]},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vetiver: Version, Share, Deploy, and Monitor Models — vetiver-package","text":"Maintainer: Julia Silge julia.silge@rstudio.com (ORCID) contributors: RStudio [copyright holder, funder]","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_api.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Plumber API to predict with a deployable vetiver_model() object — vetiver_api","title":"Create a Plumber API to predict with a deployable vetiver_model() object — vetiver_api","text":"Use vetiver_api() add POST endpoint predictions trained vetiver_model() Plumber router.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_api.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Plumber API to predict with a deployable vetiver_model() object — vetiver_api","text":"","code":"vetiver_api(   pr,   vetiver_model,   path = \"/predict\",   debug = is_interactive(),   ... )  vetiver_pr_post(   pr,   vetiver_model,   path = \"/predict\",   debug = is_interactive(),   ...,   check_ptype = TRUE )  vetiver_pr_docs(pr, vetiver_model, path = \"/predict\", all_docs = TRUE)"},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_api.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Plumber API to predict with a deployable vetiver_model() object — vetiver_api","text":"pr Plumber router, plumber::pr(). vetiver_model deployable vetiver_model() object path endpoint path debug TRUE provides insight API errors. ... arguments passed predict(), prediction type check_ptype ptype stored vetiver_model (used visual API documentation) also used check new data prediction time? Defaults TRUE. all_docs interactive visual API documentation created POST endpoints router pr? defaults TRUE, assumes POST endpoints use vetiver_model$ptype input data prototype.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_api.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Plumber API to predict with a deployable vetiver_model() object — vetiver_api","text":"Plumber router prediction endpoint added.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_api.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Plumber API to predict with a deployable vetiver_model() object — vetiver_api","text":"can first store version vetiver_model() vetiver_pin_write(), create API endpoint vetiver_api(). Setting debug = TRUE may expose sensitive data model API errors. Two GET endpoints also added router pr, depending characteristics model object: /pin-url endpoint return URL pinned model /ping endpoint API health. function vetiver_api() uses: vetiver_pr_post() endpoint definition vetiver_pr_docs() create visual API documentation modular functions available advanced use cases.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_api.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Plumber API to predict with a deployable vetiver_model() object — vetiver_api","text":"","code":"cars_lm <- lm(mpg ~ ., data = mtcars) v <- vetiver_model(cars_lm, \"cars_linear\")  library(plumber) pr() %>% vetiver_api(v) #> # Plumber router with 2 endpoints, 4 filters, and 0 sub-routers. #> # Use `pr_run()` on this object to start the API. #> ├──[queryString] #> ├──[body] #> ├──[cookieParser] #> ├──[sharedSecret] #> ├──/ping (GET) #> └──/predict (POST) #>  ## is the same as: pr() %>% vetiver_pr_post(v) %>% vetiver_pr_docs(v) #> # Plumber router with 2 endpoints, 4 filters, and 0 sub-routers. #> # Use `pr_run()` on this object to start the API. #> ├──[queryString] #> ├──[body] #> ├──[cookieParser] #> ├──[sharedSecret] #> ├──/ping (GET) #> └──/predict (POST) #>  ## for either, next, pipe to `pr_run()`"},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_create_description.html","id":null,"dir":"Reference","previous_headings":"","what":"Model constructor methods — vetiver_create_description.train","title":"Model constructor methods — vetiver_create_description.train","text":"developer-facing functions, useful supporting new model types. model supported vetiver_model() uses four methods deployable object created: vetiver_create_description() function generates helpful description model based characteristics. method required. vetiver_create_meta() function creates correct vetiver_meta() model. especially helpful specifying packages needed prediction. model can use default method , special metadata. vetiver_ptype() function finds input data prototype training data (zero-row slice) use checking prediction time. method required. vetiver_prepare_model() function executes last. Use function tasks like checking model trained reducing size model via butcher::butcher(). model can use default method , return model without changes.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_create_description.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model constructor methods — vetiver_create_description.train","text":"","code":"# S3 method for train vetiver_create_description(model)  # S3 method for train vetiver_prepare_model(model)  # S3 method for glm vetiver_create_description(model)  # S3 method for glm vetiver_prepare_model(model)  # S3 method for lm vetiver_create_description(model)  # S3 method for lm vetiver_prepare_model(model)  # S3 method for Learner vetiver_create_description(model)  # S3 method for Learner vetiver_prepare_model(model)  vetiver_create_description(model)  # S3 method for default vetiver_create_description(model)  vetiver_prepare_model(model)  # S3 method for default vetiver_prepare_model(model)  # S3 method for ranger vetiver_create_description(model)  # S3 method for ranger vetiver_prepare_model(model)  # S3 method for workflow vetiver_create_description(model)  # S3 method for workflow vetiver_prepare_model(model)  # S3 method for xgb.Booster vetiver_create_description(model)"},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_create_description.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model constructor methods — vetiver_create_description.train","text":"model trained model, lm() model tidymodels workflows::workflow().","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_create_description.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model constructor methods — vetiver_create_description.train","text":"four generics use class model dispatch.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_create_description.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model constructor methods — vetiver_create_description.train","text":"","code":"cars_lm <- lm(mpg ~ ., data = mtcars) vetiver_create_description(cars_lm) #> [1] \"An OLS linear regression model\" vetiver_prepare_model(cars_lm) #>  #> Call: #> dummy_call() #>  #> Coefficients: #> (Intercept)          cyl         disp           hp         drat   #>    12.30337     -0.11144      0.01334     -0.02148      0.78711   #>          wt         qsec           vs           am         gear   #>    -3.71530      0.82104      0.31776      2.52023      0.65541   #>        carb   #>    -0.19942   #>"},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_create_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Metadata constructors for vetiver_model() object — vetiver_create_meta.train","title":"Metadata constructors for vetiver_model() object — vetiver_create_meta.train","text":"developer-facing functions, useful supporting new model types. metadata stored vetiver_model() object four elements: $user, metadata supplied user $version, version pin (can NULL pinning) $url, URL pin located, $required_pkgs, character string R packages required prediction","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_create_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metadata constructors for vetiver_model() object — vetiver_create_meta.train","text":"","code":"# S3 method for train vetiver_create_meta(model, metadata)  vetiver_meta(user = list(), version = NULL, url = NULL, required_pkgs = NULL)  vetiver_create_meta(model, metadata)  # S3 method for default vetiver_create_meta(model, metadata)  # S3 method for Learner vetiver_create_meta(model, metadata)  # S3 method for ranger vetiver_create_meta(model, metadata)  # S3 method for workflow vetiver_create_meta(model, metadata)  # S3 method for xgb.Booster vetiver_create_meta(model, metadata)"},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_create_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metadata constructors for vetiver_model() object — vetiver_create_meta.train","text":"model trained model, lm() model tidymodels workflows::workflow(). metadata list containing additional metadata store pin. retrieving pin, stored user key, avoid potential clashes metadata pins uses. user Metadata supplied user version Version pin url URL pin, required_pkgs Character string R packages required prediction","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_create_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metadata constructors for vetiver_model() object — vetiver_create_meta.train","text":"vetiver_meta() constructor returns list. vetiver_create_meta function returns vetiver_meta() list.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_create_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metadata constructors for vetiver_model() object — vetiver_create_meta.train","text":"","code":"vetiver_meta() #> $user #> list() #>  #> $version #> NULL #>  #> $url #> NULL #>  #> $required_pkgs #> NULL #>   cars_lm <- lm(mpg ~ ., data = mtcars) vetiver_create_meta(cars_lm, list()) #> $user #> list() #>  #> $version #> NULL #>  #> $url #> NULL #>  #> $required_pkgs #> NULL #>"},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_create_ptype.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a vetiver input data prototype — vetiver_ptype.train","title":"Create a vetiver input data prototype — vetiver_ptype.train","text":"Optionally find return input data prototype model.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_create_ptype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a vetiver input data prototype — vetiver_ptype.train","text":"","code":"# S3 method for train vetiver_ptype(model, ...)  # S3 method for glm vetiver_ptype(model, ...)  # S3 method for lm vetiver_ptype(model, ...)  # S3 method for Learner vetiver_ptype(model, ...)  vetiver_ptype(model, ...)  # S3 method for default vetiver_ptype(model, ...)  vetiver_create_ptype(model, save_ptype, ...)  # S3 method for ranger vetiver_ptype(model, ...)  # S3 method for workflow vetiver_ptype(model, ...)  # S3 method for xgb.Booster vetiver_ptype(model, ...)"},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_create_ptype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a vetiver input data prototype — vetiver_ptype.train","text":"model trained model, lm() model tidymodels workflows::workflow(). ... method-specific arguments passed vetiver_ptype() compute input data prototype, ptype_data (sample training features). save_ptype input data prototype stored model? options TRUE (default, stores zero-row slice training data), FALSE (input data prototype visual documentation checking), dataframe used checking prediction time examples API visual documentation.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_create_ptype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a vetiver input data prototype — vetiver_ptype.train","text":"vetiver_ptype method returns zero-row dataframe, vetiver_create_ptype() returns either zero-row dataframe, NULL, dataframe passed save_ptype.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_create_ptype.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a vetiver input data prototype — vetiver_ptype.train","text":"developer-facing functions, useful supporting new model types. vetiver_model() object optionally stores input data prototype checking prediction time. default save_ptype, TRUE, finds input data prototype (zero-row slice training data) via vetiver_ptype(). save_ptype = FALSE opts storing input data prototype. may pass data save_ptype, sure check structure training data, perhaps hardhat::scream().","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_create_ptype.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a vetiver input data prototype — vetiver_ptype.train","text":"","code":"cars_lm <- lm(mpg ~ cyl + disp, data = mtcars)  vetiver_create_ptype(cars_lm, TRUE) #> # A tibble: 0 × 2 #> # … with 2 variables: cyl <dbl>, disp <dbl>  ## calls the right method for `model` via: vetiver_ptype(cars_lm) #> # A tibble: 0 × 2 #> # … with 2 variables: cyl <dbl>, disp <dbl>  ## can also turn off `ptype` vetiver_create_ptype(cars_lm, FALSE) #> NULL ## some models require that you pass in training features cars_rf <- ranger::ranger(mpg ~ ., data = mtcars) vetiver_ptype(cars_rf, ptype_data = mtcars[,-1]) #> # A tibble: 0 × 10 #> # … with 10 variables: cyl <dbl>, disp <dbl>, hp <dbl>, drat <dbl>, #> #   wt <dbl>, qsec <dbl>, vs <dbl>, am <dbl>, gear <dbl>, carb <dbl>"},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_deploy_rsconnect.html","id":null,"dir":"Reference","previous_headings":"","what":"Deploy a vetiver model API to RStudio Connect — vetiver_deploy_rsconnect","title":"Deploy a vetiver model API to RStudio Connect — vetiver_deploy_rsconnect","text":"Use vetiver_deploy_rsconnect() deploy vetiver_model() versioned stored via vetiver_pin_write() Plumber API RStudio Connect.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_deploy_rsconnect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deploy a vetiver model API to RStudio Connect — vetiver_deploy_rsconnect","text":"","code":"vetiver_deploy_rsconnect(   board,   name,   version = NULL,   predict_args = list(),   appTitle = glue::glue(\"{name} model API\"),   ... )"},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_deploy_rsconnect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deploy a vetiver model API to RStudio Connect — vetiver_deploy_rsconnect","text":"board pin board, created board_folder(), board_rsconnect(), board_url() another board_ function. name Pin name. version Retrieve specific version pin. Use pin_versions() find versions available created. predict_args list optional arguments passed vetiver_api() endpoint path prediction type. appTitle API title RStudio Connect. Use default based name, pass title. ... arguments passed rsconnect::deployApp() account launch.browser.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_deploy_rsconnect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deploy a vetiver model API to RStudio Connect — vetiver_deploy_rsconnect","text":"deployment success (TRUE FALSE), invisibly.","code":""},{"path":[]},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_deploy_rsconnect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deploy a vetiver model API to RStudio Connect — vetiver_deploy_rsconnect","text":"","code":"library(pins) tmp <- tempfile() b <- board_temp(versioned = TRUE) cars_lm <- lm(mpg ~ ., data = mtcars) v <- vetiver_model(cars_lm, \"cars_linear\") vetiver_pin_write(b, v) #> Creating new version '20220407T171905Z-ef031' #> Writing to pin 'cars_linear' #>  #> Create a Model Card for your published model #> • Model Cards provide a framework for transparent, responsible reporting #> • Use the vetiver `.Rmd` template as a place to start #> This message is displayed once per session.  if (FALSE) { vetiver_deploy_rsconnect(b, \"cars_linear\", predict_args = list(debug = TRUE)) }"},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_endpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a model API endpoint object for prediction — vetiver_endpoint","title":"Create a model API endpoint object for prediction — vetiver_endpoint","text":"Create model API endpoint object prediction","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_endpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a model API endpoint object for prediction — vetiver_endpoint","text":"","code":"vetiver_endpoint(url)"},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_endpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a model API endpoint object for prediction — vetiver_endpoint","text":"url API endpoint URL","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_endpoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a model API endpoint object for prediction — vetiver_endpoint","text":"new vetiver_endpoint object","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_endpoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a model API endpoint object for prediction — vetiver_endpoint","text":"","code":"vetiver_endpoint(\"https://colorado.rstudio.com/rsc/biv_svm_api/predict\") #>  #> ── A model API endpoint for prediction:  #> https://colorado.rstudio.com/rsc/biv_svm_api/predict"},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a vetiver object for deployment of a trained model — vetiver_model","title":"Create a vetiver object for deployment of a trained model — vetiver_model","text":"vetiver_model() object collects information needed store, version, deploy trained model. vetiver_model() object created, can: store version pin vetiver_pin_write() create API endpoint vetiver_api()","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a vetiver object for deployment of a trained model — vetiver_model","text":"","code":"vetiver_model(   model,   model_name,   ...,   description = NULL,   metadata = list(),   save_ptype = TRUE,   versioned = NULL )  new_vetiver_model(model, model_name, description, metadata, ptype, versioned)"},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a vetiver object for deployment of a trained model — vetiver_model","text":"model trained model, lm() model tidymodels workflows::workflow(). model_name Model name ID. ... method-specific arguments passed vetiver_ptype() compute input data prototype, ptype_data (sample training features). description detailed description model. omitted, brief description model generated. metadata list containing additional metadata store pin. retrieving pin, stored user key, avoid potential clashes metadata pins uses. save_ptype input data prototype stored model? options TRUE (default, stores zero-row slice training data), FALSE (input data prototype visual documentation checking), dataframe used checking prediction time examples API visual documentation. versioned model object versioned stored vetiver_pin_write()? default, NULL, use default board store model. ptype input data prototype. NULL, checking new data prediction time.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a vetiver object for deployment of a trained model — vetiver_model","text":"new vetiver_model object.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a vetiver object for deployment of a trained model — vetiver_model","text":"can provide data save_ptype use examples visual documentation created vetiver_api(). , consider checking input data prototype structure training data (perhaps hardhat::scream()) /simulating data avoid leaking PII via deployed model.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a vetiver object for deployment of a trained model — vetiver_model","text":"","code":"cars_lm <- lm(mpg ~ ., data = mtcars) vetiver_model(cars_lm, \"cars_linear\", pins::board_temp()) #>  #> ── cars_linear ─ <butchered_lm> model for deployment  #> An OLS linear regression model using 10 features"},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_pin_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and write a trained model to a board of models — vetiver_pin_write","title":"Read and write a trained model to a board of models — vetiver_pin_write","text":"Use vetiver_pin_write() pin trained model board models, along input prototype new data model metadata. Use vetiver_pin_read() retrieve pinned object.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_pin_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and write a trained model to a board of models — vetiver_pin_write","text":"","code":"vetiver_pin_write(board, vetiver_model)  vetiver_pin_read(board, name, version = NULL)"},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_pin_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and write a trained model to a board of models — vetiver_pin_write","text":"board pin board, created board_folder(), board_rsconnect(), board_url() another board_ function. vetiver_model deployable vetiver_model() object name Pin name. version Retrieve specific version pin. Use pin_versions() find versions available created.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_pin_write.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and write a trained model to a board of models — vetiver_pin_write","text":"vetiver_pin_read() returns vetiver_model(); vetiver_pin_write()returns name new pin, invisibly.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_pin_write.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read and write a trained model to a board of models — vetiver_pin_write","text":"functions read write vetiver_model() pin specified board containing model object elements needed prediction, model's input data prototype packages needed prediction time. may use pins::pin_read() pins::pin_meta() handle pin, vetiver_pin_read() returns vetiver_model() object ready deployment.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_pin_write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and write a trained model to a board of models — vetiver_pin_write","text":"","code":"library(pins) model_board <- board_temp()  cars_lm <- lm(mpg ~ ., data = mtcars) v <- vetiver_model(cars_lm, \"cars_linear\") vetiver_pin_write(model_board, v) #> Creating new version '20220407T171905Z-ef031' #> Writing to pin 'cars_linear' model_board #> Pin board <pins_board_folder> #> Path: '/tmp/Rtmp0FD1Pc/pins-3835254072f4' #> Cache size: 0 #> Pins [1]: 'cars_linear'  vetiver_pin_read(model_board, \"cars_linear\") #>  #> ── cars_linear ─ <butchered_lm> model for deployment  #> An OLS linear regression model using 10 features  # can use `version` argument to read a specific version: pin_versions(model_board, \"cars_linear\") #> # A tibble: 1 × 3 #>   version                created             hash  #>   <chr>                  <dttm>              <chr> #> 1 20220407T171905Z-ef031 2022-04-07 17:19:00 ef031"},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_pr_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Plumber API to predict with a deployable vetiver_model() object — vetiver_pr_predict","title":"Create a Plumber API to predict with a deployable vetiver_model() object — vetiver_pr_predict","text":"function deprecated use vetiver_api directly instead.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_pr_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Plumber API to predict with a deployable vetiver_model() object — vetiver_pr_predict","text":"","code":"vetiver_pr_predict(   pr,   vetiver_model,   path = \"/predict\",   debug = is_interactive(),   ... )"},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_pr_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Plumber API to predict with a deployable vetiver_model() object — vetiver_pr_predict","text":"pr Plumber router, plumber::pr(). vetiver_model deployable vetiver_model() object path endpoint path debug TRUE provides insight API errors. ... arguments passed predict(), prediction type","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_type_convert.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert new data at prediction time using input data prototype — vetiver_type_convert","title":"Convert new data at prediction time using input data prototype — vetiver_type_convert","text":"developer-facing function, useful supporting new model types. prediction time, new observations typically must checked sometimes converted data types training time.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_type_convert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert new data at prediction time using input data prototype — vetiver_type_convert","text":"","code":"vetiver_type_convert(new_data, ptype)"},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_type_convert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert new data at prediction time using input data prototype — vetiver_type_convert","text":"new_data New data making predictions, data frame. ptype input data prototype, 0-row slice training data","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_type_convert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert new data at prediction time using input data prototype — vetiver_type_convert","text":"converted dataframe","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_type_convert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert new data at prediction time using input data prototype — vetiver_type_convert","text":"","code":"library(tibble) training_df <- tibble(x = as.Date(\"2021-01-01\") + 0:9,                       y = LETTERS[1:10], z = letters[11:20]) training_df #> # A tibble: 10 × 3 #>    x          y     z     #>    <date>     <chr> <chr> #>  1 2021-01-01 A     k     #>  2 2021-01-02 B     l     #>  3 2021-01-03 C     m     #>  4 2021-01-04 D     n     #>  5 2021-01-05 E     o     #>  6 2021-01-06 F     p     #>  7 2021-01-07 G     q     #>  8 2021-01-08 H     r     #>  9 2021-01-09 I     s     #> 10 2021-01-10 J     t      ptype <- vctrs::vec_slice(training_df, 0) vetiver_type_convert(tibble(x = \"2021-02-01\", y = \"J\", z = \"k\"), ptype) #> # A tibble: 1 × 3 #>   x          y     z     #>   <date>     <chr> <chr> #> 1 2021-02-01 J     k      ## unsuccessful conversion generates an error: try(vetiver_type_convert(tibble(x = \"potato\", y = \"J\", z = \"k\"), ptype)) #> Error in warn_to_error(e) : [0, 1]: expected date like , but got 'potato'"},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_write_docker.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a Dockerfile for a vetiver model — vetiver_write_docker","title":"Write a Dockerfile for a vetiver model — vetiver_write_docker","text":"creating Plumber file vetiver_write_plumber(), use vetiver_write_docker() create Dockerfile plus renv.lock file pinned vetiver_model().","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_write_docker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a Dockerfile for a vetiver model — vetiver_write_docker","text":"","code":"vetiver_write_docker(   vetiver_model,   plumber_file = \"plumber.R\",   path = \".\",   rspm = TRUE )"},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_write_docker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a Dockerfile for a vetiver model — vetiver_write_docker","text":"vetiver_model deployable vetiver_model() object plumber_file path Plumber file, created via vetiver_write_plumber(). Defaults plumber.R working directory. path path write Dockerfile renv.lock lockfile, capturing model's package dependencies. Defaults working directory. rspm logical use RStudio Public Package Manager renv::restore() Docker image. Defaults TRUE.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_write_docker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a Dockerfile for a vetiver model — vetiver_write_docker","text":"content Dockerfile, invisibly.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_write_docker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a Dockerfile for a vetiver model — vetiver_write_docker","text":"","code":"library(pins) tmp_plumber <- tempfile() b <- board_temp(versioned = TRUE) cars_lm <- lm(mpg ~ ., data = mtcars) v <- vetiver_model(cars_lm, \"cars_linear\") vetiver_pin_write(b, v) #> Creating new version '20220407T171906Z-ef031' #> Writing to pin 'cars_linear' vetiver_write_plumber(b, \"cars_linear\", file = tmp_plumber) vetiver_write_docker(v, tmp_plumber, tempdir()) #> * Lockfile written to '/tmp/Rtmp0FD1Pc/renv.lock'."},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_write_plumber.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a deployable Plumber file for a vetiver model — vetiver_write_plumber","title":"Write a deployable Plumber file for a vetiver model — vetiver_write_plumber","text":"Use vetiver_write_plumber() create plumber.R file vetiver_model() versioned stored via vetiver_pin_write().","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_write_plumber.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a deployable Plumber file for a vetiver model — vetiver_write_plumber","text":"","code":"vetiver_write_plumber(board, name, version = NULL, ..., file = \"plumber.R\")"},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_write_plumber.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a deployable Plumber file for a vetiver model — vetiver_write_plumber","text":"board pin board, created board_folder(), board_rsconnect(), board_url() another board_ function. name Pin name. version Retrieve specific version pin. Use pin_versions() find versions available created. ... arguments passed vetiver_api() endpoint path prediction type. file path write Plumber file. Defaults plumber.R working directory. See plumber::plumb() naming precedence rules.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_write_plumber.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a deployable Plumber file for a vetiver model — vetiver_write_plumber","text":"content plumber.R file, invisibly.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_write_plumber.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write a deployable Plumber file for a vetiver model — vetiver_write_plumber","text":"default, function find use latest version vetiver model; model API (deployed) linked specific version. can override default behavior choosing specific version.","code":""},{"path":"https://vetiver.tidymodels.org/dev/reference/vetiver_write_plumber.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a deployable Plumber file for a vetiver model — vetiver_write_plumber","text":"","code":"library(pins) tmp <- tempfile() b <- board_temp(versioned = TRUE) cars_lm <- lm(mpg ~ ., data = mtcars) v <- vetiver_model(cars_lm, \"cars_linear\") vetiver_pin_write(b, v) #> Creating new version '20220407T171908Z-ef031' #> Writing to pin 'cars_linear'  vetiver_write_plumber(b, \"cars_linear\", file = tmp)"},{"path":"https://vetiver.tidymodels.org/dev/news/index.html","id":"vetiver-development-version","dir":"Changelog","previous_headings":"","what":"vetiver (development version)","title":"vetiver (development version)","text":"Improve Dockerfiles generated.","code":""},{"path":"https://vetiver.tidymodels.org/dev/news/index.html","id":"vetiver-013","dir":"Changelog","previous_headings":"","what":"vetiver 0.1.3","title":"vetiver 0.1.3","text":"CRAN release: 2022-03-09 Update tests use redaction snapshots. Use ranger conditionally examples/tests.","code":""},{"path":"https://vetiver.tidymodels.org/dev/news/index.html","id":"vetiver-012","dir":"Changelog","previous_headings":"","what":"vetiver 0.1.2","title":"vetiver 0.1.2","text":"CRAN release: 2022-02-16 Generate Dockerfiles deploy model (#71). Added support glm (#75) ranger (#76). Deprecated vetiver_pr_predict() favor using vetiver_api() (#77).","code":""},{"path":"https://vetiver.tidymodels.org/dev/news/index.html","id":"vetiver-011","dir":"Changelog","previous_headings":"","what":"vetiver 0.1.1","title":"vetiver 0.1.1","text":"CRAN release: 2022-01-07 Added support tidymodels (#51), caret (#52), mlr3 (#56). Added vignette. Escalated parsing/conversion warnings errors vetiver_type_convert() (#60). Added predict method vetiver_model() (addition vetiver_endpoint()) (#61). New function vetiver_deploy_rsconnect() deploy RStudio Connect. Added R Markdown template Model Card responsible, transparent model reporting (#62, #63). Modularized vetiver_pr_predict() support advanced use cases (#67).","code":""},{"path":"https://vetiver.tidymodels.org/dev/news/index.html","id":"vetiver-010","dir":"Changelog","previous_headings":"","what":"vetiver 0.1.0","title":"vetiver 0.1.0","text":"CRAN release: 2021-11-02 Initial CRAN release package.","code":""}]
